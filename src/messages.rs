pub struct Messages;

impl Messages {
    pub fn ru() -> RussianMessages {
        RussianMessages
    }

    // pub fn en() -> EnglishMessages { ... }
}

pub struct RussianMessages;

impl RussianMessages {
    pub fn welcome(&self) -> String {
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ GlebusVPN. üöÄ\n\n\
         –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (1-5):"
            .to_string()
    }

    pub fn invalid_state(&self) -> String {
        "‚ö†Ô∏è –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ. üòÖ\n\n\
         –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏. üòä"
            .to_string()
    }

    pub fn select_platform(&self) -> String {
        "üöÄ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.".to_string()
    }

    pub fn device_number(&self, number: u8) -> String {
        format!("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ #{number}:")
    }

    pub fn excessive_devices(&self) -> String {
        "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî 5. üòî\n\n\
         –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @LineGM. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôå"
            .to_string()
    }

    pub fn invalid_device_count(&self) -> String {
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. üöÄ".to_string()
    }

    pub fn cancel_operation(&self) -> String {
        "‚ùå –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.".to_string()
    }

    pub fn error(&self, context: &str) -> String {
        format!(
            "‚ö†Ô∏è –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤ {} —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòï\n\n\
             –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. üîÑ\n\n\
             –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            context
        )
    }

    pub fn completion(&self) -> String {
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã. ‚úÖ".to_string()
    }

    pub fn connection_info(&self, url: &str) -> String {
        format!(
            "`{}`\n\n–í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify, –æ–Ω–æ –µ—Å—Ç—å –Ω–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö",
            url
        )
    }

    pub fn already_connected(&self) -> String {
        "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GlebusVPN.".to_string()
    }

    pub fn show_connections(&self) -> String {
        "üì± –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è".to_string()
    }

    pub fn your_connections(&self) -> String {
        "üîç –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:".to_string()
    }

    pub fn no_active_connections(&self) -> String {
        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π".to_string()
    }
}
