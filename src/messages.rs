pub struct Messages;

impl Messages {
    pub fn ru() -> RussianMessages {
        RussianMessages
    }
}

pub struct RussianMessages;

impl RussianMessages {
    pub fn welcome_prompt(&self) -> String {
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ GlebusVPN üöÄ".to_string()
    }

    pub fn invalid_input(&self) -> String {
        "‚ö†Ô∏è –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ. üòÖ\n\n\
         –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏. üòä"
            .to_string()
    }

    pub fn error(&self, context: &str) -> String {
        format!(
            "‚ö†Ô∏è –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤ {} —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòï\n\n\
             –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. üîÑ\n\n\
             –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            context
        )
    }

    pub fn new_user_confirmed(&self) -> String {
        "üöÄ –î–∞–≤–∞–π!".to_string()
    }

    pub fn back(&self) -> String {
        "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è".to_string()
    }
}
