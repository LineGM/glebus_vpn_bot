use teloxide::{
    dispatching::{dialogue, dialogue::InMemStorage, UpdateHandler},
    prelude::*,
    types::{InlineKeyboardButton, InlineKeyboardMarkup},
    utils::command::BotCommands,
};

type MyDialogue = Dialogue<State, InMemStorage<State>>;
type HandlerResult = Result<(), Box<dyn std::error::Error + Send + Sync>>;

#[derive(Clone, Default)]
pub enum State {
    #[default]
    Start,
    ReceiveDeviceCount,
    ReceiveDeviceInfo {
        total_devices: u8,
        current_device: u8,
        applications: Vec<String>,
    },
}

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase")]
enum Command {
    Help,
    Start,
    Cancel,
}

fn schema() -> UpdateHandler<Box<dyn std::error::Error + Send + Sync + 'static>> {
    use dptree::case;

    let command_handler = teloxide::filter_command::<Command, _>()
        .branch(
            case![State::Start]
                .branch(case![Command::Help].endpoint(help))
                .branch(case![Command::Start].endpoint(start)),
        )
        .branch(case![Command::Cancel].endpoint(cancel));

    let message_handler = Update::filter_message()
        .branch(command_handler)
        .branch(case![State::ReceiveDeviceCount].endpoint(receive_device_count))
        .branch(dptree::endpoint(invalid_state));

    let callback_query_handler = Update::filter_callback_query().branch(
        case![State::ReceiveDeviceInfo {
            total_devices,
            current_device,
            applications
        }]
        .endpoint(receive_platform_selection),
    );

    dialogue::enter::<Update, InMemStorage<State>, State, _>()
        .branch(message_handler)
        .branch(callback_query_handler)
}

async fn start(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    let username = msg
        .from
        .map(|u| u.username.unwrap_or_else(|| "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π".to_string()))
        .unwrap_or_else(|| "–∞–Ω–æ–Ω–∏–º".to_string());

    log::info!(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å chat_id={} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start",
        username,
        msg.chat.id
    );

    bot.send_message(
        msg.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç. –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ GlebusVPN. üöÄ\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø (–æ—Ç 1 –¥–æ 5):",
    )
    .await?;
    dialogue.update(State::ReceiveDeviceCount).await?;
    Ok(())
}

async fn help(bot: Bot, msg: Message) -> HandlerResult {
    log::info!(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å chat_id={} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help",
        msg.from
            .map(|u| u.username.unwrap_or_else(|| "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π".to_string()))
            .unwrap_or_else(|| "–∞–Ω–æ–Ω–∏–º".to_string()),
        msg.chat.id
    );

    bot.send_message(msg.chat.id, Command::descriptions().to_string())
        .await?;
    Ok(())
}

async fn cancel(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    log::info!(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å chat_id={} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /cancel",
        msg.from
            .map(|u| u.username.unwrap_or_else(|| "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π".to_string()))
            .unwrap_or_else(|| "–∞–Ω–æ–Ω–∏–º".to_string()),
        msg.chat.id
    );

    bot.send_message(msg.chat.id, "‚ùå –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.")
        .await?;
    dialogue.exit().await?;
    Ok(())
}

async fn invalid_state(bot: Bot, msg: Message) -> HandlerResult {
    bot.send_message(
        msg.chat.id,
        "‚ö†Ô∏è –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ. üòÖ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏. üòä",
    )
    .await?;
    Ok(())
}

async fn receive_device_count(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    let user_input = msg.text().unwrap_or("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
    let username = msg
        .from
        .as_ref()
        .map(|u| {
            u.username
                .clone()
                .unwrap_or_else(|| "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π".to_string())
        })
        .unwrap_or_else(|| "–∞–Ω–æ–Ω–∏–º".to_string());

    match user_input.parse::<u8>() {
        Ok(count) if count > 0 && count <= 5 => {
            log::info!(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å chat_id={} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ {} —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                username,
                msg.chat.id,
                count
            );

            bot.send_message(
                msg.chat.id,
                "üöÄ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ. üòä",
            )
            .await?;

            dialogue
                .update(State::ReceiveDeviceInfo {
                    total_devices: count,
                    current_device: 1,
                    applications: Vec::new(),
                })
                .await?;

            ask_device_platform(&bot, msg.chat.id, 1).await?;
        }
        Ok(count) if count > 5 => {
            log::warn!(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å chat_id={} –≤–≤—ë–ª –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {}",
                username,
                msg.chat.id,
                count
            );

            bot.send_message(
                msg.chat.id,
                format!(
                    "‚ùå –£–≤—ã, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ‚Äî 5. üòî\n\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @LineGM. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôå"
                )
            )
            .await?;
        }
        Ok(_) => {
            log::warn!(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å chat_id={} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {}",
                username,
                msg.chat.id,
                user_input
            );

            bot.send_message(
                msg.chat.id,
                "‚ö†Ô∏è –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ. üòÖ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. üöÄ"
            )
            .await?;
        }
        Err(_) => {
            log::warn!(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å chat_id={} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {}",
                username,
                msg.chat.id,
                user_input
            );

            bot.send_message(
                msg.chat.id,
                "‚ö†Ô∏è –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ. üòÖ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. üöÄ",
            )
            .await?;
        }
    }
    Ok(())
}

async fn ask_device_platform(bot: &Bot, chat_id: ChatId, device_num: u8) -> HandlerResult {
    let platforms = ["Windows", "Android", "Linux", "MacOS", "iOS"]
        .map(|p| InlineKeyboardButton::callback(p, p));

    bot.send_message(chat_id, format!("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ #{}:", device_num))
        .reply_markup(InlineKeyboardMarkup::new([platforms]))
        .await?;
    Ok(())
}

async fn receive_platform_selection(
    bot: Bot,
    dialogue: MyDialogue,
    (total_devices, current_device, mut applications): (u8, u8, Vec<String>),
    q: CallbackQuery,
) -> HandlerResult {
    if let Some(platform) = &q.data {
        log::info!(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id={} –≤—ã–±—Ä–∞–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º—É {} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {}",
            q.from.id,
            platform,
            current_device
        );

        applications.push(format!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {}: {}", current_device, platform));

        if current_device < total_devices {
            let next_device = current_device + 1;
            dialogue
                .update(State::ReceiveDeviceInfo {
                    total_devices,
                    current_device: next_device,
                    applications,
                })
                .await?;

            ask_device_platform(&bot, dialogue.chat_id(), next_device).await?;
        } else {
            let summary = applications.join("\n");
            log::info!(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id={} –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n{}",
                q.from.id,
                summary
            );

            bot.send_message(
                q.from.id,
                format!(
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞. ‚úÖ\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üôè",
                ),
            )
            .await?;

            dialogue.exit().await?;
        }
    }
    Ok(())
}

#[tokio::main]
async fn main() {
    dotenv::dotenv().ok();
    log4rs::init_file(
        dotenv::var("LOG_FILE").unwrap(),
        Default::default(),
    )
    .expect("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞");

    log::info!("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ GlebusVPN...");

    let bot = Bot::from_env();

    Dispatcher::builder(bot, schema())
        .dependencies(dptree::deps![InMemStorage::<State>::new()])
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}
